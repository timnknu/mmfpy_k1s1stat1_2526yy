s = """


Wikipedia The Free Encyclopedia

    Donate
    Create account
    Log in

Wiki Loves Monuments: Photograph a monument, help Wikipedia and win! Learn more

Delete character

    Article
    Talk

    Read
    Edit
    View history

Tools

From Wikipedia, the free encyclopedia

The delete control character (also called DEL or rubout) is the last character in the ASCII repertoire, with the code 127.[1] It is supposed to do nothing and was designed to erase incorrect characters on paper tape. It is denoted as ^? in caret notation and is U+007F in Unicode.

Terminal emulators may produce DEL when ← Backspace key or Control+← Backspace or Control+? are typed.
History
  						· 			  	  	NUL
				• 	· 	• 		• 	CR
				• 	· 		• 		LF
	• 	• 	• 	• 	· 	• 	• 	• 	DEL
		• 			· 				SP
"Delete" along with some other ASCII control characters and space as they appear on punched tape

This code was originally used to mark deleted characters on punched tape, since any character could be changed to all 1s by punching holes everywhere. If a character was punched erroneously, punching out all seven bits caused this position to be ignored or deleted.[2][3] In hexadecimal, this is 7F to rub out 7 bits (FF to rubout 8 bits was used for 8-bit codes). This character could also be used as padding to slow down printing after newlines, though the all-zero NUL was more often used.

The Teletype Model 33 provided a key labelled RUB OUT to punch this character (after the user backed up the tape using another button), and did not provide a key that produced the backspace character (BS). Therefore, a number of less expensive computer systems that used Teletypes used this key (and thus the delete code) to ignore the previous mis-typed character. Video terminals designed to replace the teletype then had to place a key that produced this code where backspace would be expected, in particular in products from Digital Equipment Corporation. On VT100 compatible terminals, this is the character generated by the key labeled Delete.[4][5] On later terminals, such as the VT510, the key is labeled ⌫ (called backarrow in the manual[6]) and by default sent DEL, but could be set up to send BS.

Other terminals designed for systems that did not have a history of using Teletypes would usually make a key at this position send BS, leading to much confusion. Unix, in particular, had a problem in that it could only be programmed to erase the previous character for one of these (not both), thus requiring the user to reconfigure the terminal driver for each brand of terminal. Depending on the type of terminal the designer used, software would sometimes make the shortcuts Ctrl+H or Ctrl+? do something, even though these sent the same code as BS and DEL, assuming the backspace key was sending the other code.

A key marked Backspace ← that sends BS is by far the most common on modern terminals and emulators. To ensure text is not deleted backwards, the key marked "Delete" on many terminals does not send DEL and instead sends an escape sequence such as ^[[3~.[7]
Current use

Unix-like operating systems can still use it as the erase character, i.e., to delete the previous character in the line mode. The terminal driver still cannot be programmed to take both this and backspace: one must be chosen. However, most modern programs bypass this and use libraries such as Readline which accepts both codes. Most Unix terminal emulators can be configured to send either delete or backspace when the backspace key is pressed.[citation needed]

DOS/Windows never used this character in any way. The BIOS keyboard driver produced backspace when the backspace key was typed and NUL with scan code 0x53 when the delete key was typed.[8] In Windows, the delete key maps to VK_DELETE (0x2E).[9] EGA/VGA fonts, as fonts used by Win32 console, usually have the "house" symbol ⌂ at 127 (0x7F) code point (see Code page 437 for details). However, its legacy can be seen in parts of the Windows operating system: as an example, Control+← Backspace in Notepad and File Explorer used to insert the delete character[10][11] until it was changed in version 1809 to make it delete the previous word, as it does in most modern applications.[12][13]
See also

    Eight Ones
    Backspace

References

Vint Cerf (October 16, 1969). ASCII format for Network Interchange. IETF. doi:10.17487/RFC0020. RFC 20.
Robert C. Martin (2011). The Clean Coder: A Code of Conduct for Professional Programmers. Pearson Education. ISBN 9780132542883.
LaFarr (18 August 2006). ""Paper Tape" First Machinable I/O".
"VT100 Family of Video Terminals". vt100.net.
"VT100 User Guide- Chapter 3 – Table 3-4 Function Key Codes". vt100.net. Archived from the original on 2016-03-14. Retrieved 2015-04-12.
"VT510 Video Terminal Programmer Information – Chapter 5 – ANSI Control Functions". vt100.net.
"VT510 Video Terminal Programmer Information – Chapter 8 – Keyboard Processing". vt100.net. Archived from the original on 2016-03-04. Retrieved 2015-04-12.
"Keyboard scan code/Character code combinations - PC DOS Retro". Archived from the original on 2020-05-01. Retrieved 2020-04-19.
"Virtual-Key Codes (Winuser.h) - Win32 apps". 22 June 2022.
"Shortcuts - Notepad CTRL-Backspace behavior". Super User.
"When renaming a file in Windows, CTRL + Backspace does not delete whole words". Super User.
Kaufman, Lori (2018-11-23). "The New and Improved Windows 10 Notepad: Useful Tips and Features". MakeUseOf.

    "Ctrl+Backspace". Computer Hope. 2025-06-01.

Categories:

    Control charactersText user interfaceHistory of computing

    This page was last edited on 3 July 2025, at 10:47 (UTC).
    Text is available under the Creative Commons Attribution-ShareAlike 4.0 License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.

    Privacy policy
    About Wikipedia
    Disclaimers
    Contact Wikipedia
    Code of Conduct
    Developers
    Statistics
    Cookie statement
    Mobile view

    Wikimedia Foundation
    Powered by MediaWiki

"""

# v1
#print(s.count('b'))
# v2
# code_from = ord('a')
# code_to = ord('z')
# for i in range(code_from, code_to+1):
#     print(chr(i), s.count(chr(i)))

used_chars = []
for c in s:
    # if c in used_chars:
    #     pass
    # else:
    #     #used_chars += [c]
    #     used_chars.append(c)
    #if not (c in used_chars):
    if c not in used_chars:
        used_chars.append(c)

#used_chars.sort()
print(used_chars)

stats = []
for c in used_chars:
    num = s.count(c)
    print(c, num)
    stats.append( (num, c) )
stats.sort()
print(stats[::-1])

for n, ch in stats[::-1]:
    if ch=='\n':
        print('а символів переходу на новий рядок (\\n) у нас є ', n)
    else:
        print(ch, '--->', n)

